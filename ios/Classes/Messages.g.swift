// Autogenerated from Pigeon (v14.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol IsDebugHostApi {
  func getPlatformVersion() throws -> String
  func isDebugHost() throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class IsDebugHostApiSetup {
  /// The codec used by IsDebugHostApi.
  /// Sets up an instance of `IsDebugHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: IsDebugHostApi?) {
    let getPlatformVersionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.is_debug.IsDebugHostApi.getPlatformVersion", binaryMessenger: binaryMessenger)
    if let api = api {
      getPlatformVersionChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getPlatformVersion()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getPlatformVersionChannel.setMessageHandler(nil)
    }
    let isDebugHostChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.is_debug.IsDebugHostApi.isDebugHost", binaryMessenger: binaryMessenger)
    if let api = api {
      isDebugHostChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isDebugHost()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isDebugHostChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol IsDebugFlutterApiProtocol {
  func getFlutterArgs(string stringArg: String?, completion: @escaping (Result<String, FlutterError>) -> Void)
}
class IsDebugFlutterApi: IsDebugFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  func getFlutterArgs(string stringArg: String?, completion: @escaping (Result<String, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.is_debug.IsDebugFlutterApi.getFlutterArgs"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([stringArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName:channelName)))
        return
      }
      if (listResponse.count > 1) {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)));
      } else if (listResponse[0] == nil) {
        completion(.failure(FlutterError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! String
        completion(.success(result))
      }
    }
  }
}
